
import java.io.*;
import java.net.*;

public class Server {
public static void main(String args[]) throws IOException
     {

    ServerSocket ServerSocket = null;
        try {
                ServerSocket = new ServerSocket(20904);
        } catch (IOException e) {
                System.err.println("Can't listen on 20904.");
                System.exit(1);
        }

    Socket connection = null;
        System.out.println("Waiting for connection");

        try {
                connection = ServerSocket.accept();
        } catch (IOException e) {
                System.err.println("Socket accept failed.");
                System.exit(1);
        }
        System.out.println("Connected: " + connection.getInetAddress().getHostName());


    ObjectOutputStream out;
    ObjectInputStream in;
    String message;
    int menuItem = 0;
    String cmd = "";

    in = new ObjectInputStream(connection.getInputStream());
        out = new ObjectOutputStream(connection.getOutputStream());
    out.flush();

        ///////////////////WHILE SWITCH NOT 7

        while(menuItem != 7) {

                try {
    menuItem = (int) in.readObject();
        } catch (ClassNotFoundException e){
        }
    System.out.println("Read from client: " + menuItem);

    switch (menuItem) {
    case 1:
        System.out.print("\nDate: ");
        cmd = "date";
        break;

    case 2:
        System.out.print("\nuptime: ");
        cmd = "uptime";
        break;
        case 3:
                    System.out.print("\nfree memory: \n");
                    cmd = "free";
                    break;
    case 4:
                    cmd = "netstat";
                    break;
    case 5:
                    cmd = "who";
                    break;
    case 6:
                    cmd = "ps";
                    break;
    case 7:
        break;

    default:
        System.out.println("Invalid selection.");
        break;
    } // end switch menu

            ProcessBuilder pb = new ProcessBuilder(cmd);
            Process p = pb.start();
            // process input stream
            InputStream is = p.getInputStream();
            InputStreamReader isr = new InputStreamReader(is);
            BufferedReader br = new BufferedReader(isr);
            String line;


            System.out.println("running local command: " + cmd);
            boolean moreLines = true;
/////////////////////////////////////////////  PRINT THE COMMAND OUTPUT TO CLIENT
            while (moreLines) {
                line = br.readLine();
                if (line != null) {
                    System.out.println("server>" + line);
                    //sendMessage(line);
                    try {
                        out.writeObject(line);
                        out.flush();
                    } catch (IOException ioException) {
                        //ioException.printStackTrace();
                    } // end try/catch
                    System.out.println("Sending: " + line);
                } else {
                    System.out.println("\nLINE is NULL\n");
                    moreLines = false;
                } // end if/else
                System.out.println(line);
        try {
                p.waitFor();  // wait for process to complete
           } catch (InterruptedException e) {
                // handle
                }
            } // end WHILE MORELINES loop


                        /*
        } catch (IOException ioException) {
            //    System.out.println("Closing Connection: "+ ioException);
        } catch (Exception allE) {
            allE.printStackTrace();
        }
                */
         } // END MENU WHILE
         //// CLOSE SOCKETS
        System.out.println("End of Menu selection");
                in.close();
                out.close();
                connection.close();



         } //end main

/*
    void sendMessage(String msg) {
        try {
            out.writeObject(msg);
            out.flush();
            System.out.println("server>" + msg);
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
*/


} //end class Server
